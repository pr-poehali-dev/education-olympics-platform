import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import Icon from "@/components/ui/icon";
import { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";

interface Question {
  id: number;
  question: string;
  options: string[];
  correct: number;
  explanation: string;
  points: number;
}

interface OlympiadResult {
  score: number;
  maxScore: number;
  percentage: number;
  answers: number[];
  timeSpent: string;
  certificateEligible: boolean;
}

// –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ (3 –∫–ª–∞—Å—Å)
const mathQuestions: Question[] = [
  {
    id: 1,
    question: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 47 + 28?",
    options: ["73", "75", "77", "79"],
    correct: 1,
    explanation: "47 + 28 = 75. –°–∫–ª–∞–¥—ã–≤–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã: 7 + 8 = 15 (–ø–∏—à–µ–º 5, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º 1). –°–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–µ—Å—è—Ç–∫–∏: 4 + 2 + 1 = 7.",
    points: 3
  },
  {
    id: 2,
    question: "–í –∫–æ—Ä–∑–∏–Ω–µ –±—ã–ª–æ 36 —è–±–ª–æ–∫. –°—ä–µ–ª–∏ 18 —è–±–ª–æ–∫. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å?",
    options: ["16", "18", "20", "22"],
    correct: 1,
    explanation: "36 - 18 = 18. –ß—Ç–æ–±—ã –≤—ã—á–µ—Å—Ç—å 18 –∏–∑ 36, –º–æ–∂–Ω–æ —Ä–∞–∑–ª–æ–∂–∏—Ç—å: 36 - 10 - 8 = 26 - 8 = 18.",
    points: 3
  },
  {
    id: 3,
    question: "–°–∫–æ–ª—å–∫–æ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤ –≤ 2 –º–µ—Ç—Ä–∞—Ö?",
    options: ["20 —Å–º", "100 —Å–º", "200 —Å–º", "2000 —Å–º"],
    correct: 2,
    explanation: "–í 1 –º–µ—Ç—Ä–µ 100 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤, –∑–Ω–∞—á–∏—Ç –≤ 2 –º–µ—Ç—Ä–∞—Ö: 2 √ó 100 = 200 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤.",
    points: 2
  },
  {
    id: 4,
    question: "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 15, 20, 25, ?, 35",
    options: ["28", "30", "32", "33"],
    correct: 1,
    explanation: "–≠—Ç–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å —à–∞–≥–æ–º 5: 15, 20, 25, 30, 35.",
    points: 4
  },
  {
    id: 5,
    question: "–£ –ú–∞—à–∏ 3 –∫–æ—Ä–æ–±–∫–∏, –≤ –∫–∞–∂–¥–æ–π –ø–æ 8 –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π?",
    options: ["21", "24", "26", "28"],
    correct: 1,
    explanation: "3 √ó 8 = 24 –∫–∞—Ä–∞–Ω–¥–∞—à–∞. –£–º–Ω–æ–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–±–∫–µ.",
    points: 3
  },
  {
    id: 6,
    question: "–ü–µ—Ä–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π 7 —Å–º —Ä–∞–≤–µ–Ω:",
    options: ["21 —Å–º", "28 —Å–º", "35 —Å–º", "49 —Å–º"],
    correct: 1,
    explanation: "–ü–µ—Ä–∏–º–µ—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ = 4 √ó —Å—Ç–æ—Ä–æ–Ω–∞ = 4 √ó 7 = 28 —Å–º.",
    points: 4
  },
  {
    id: 7,
    question: "64 √∑ 8 = ?",
    options: ["6", "7", "8", "9"],
    correct: 2,
    explanation: "64 √∑ 8 = 8. –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: 8 √ó 8 = 64.",
    points: 3
  },
  {
    id: 8,
    question: "–ö–∞–∫–æ–µ –∏–∑ —á–∏—Å–µ–ª –±–æ–ª—å—à–µ: 156 –∏–ª–∏ 165?",
    options: ["156", "165", "–û–Ω–∏ —Ä–∞–≤–Ω—ã", "–ù–µ–ª—å–∑—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"],
    correct: 1,
    explanation: "165 > 156. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑—Ä—è–¥—ã: —Å–æ—Ç–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (1), –¥–µ—Å—è—Ç–∫–∏: 6 > 5, –∑–Ω–∞—á–∏—Ç 165 –±–æ–ª—å—à–µ.",
    points: 2
  },
  {
    id: 9,
    question: "–í –∫–ª–∞—Å—Å–µ 12 –º–∞–ª—å—á–∏–∫–æ–≤ –∏ 16 –¥–µ–≤–æ—á–µ–∫. –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–µ–≤–æ—á–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º –º–∞–ª—å—á–∏–∫–æ–≤?",
    options: ["2", "4", "6", "8"],
    correct: 1,
    explanation: "16 - 12 = 4. –î–µ–≤–æ—á–µ–∫ –±–æ–ª—å—à–µ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞.",
    points: 3
  },
  {
    id: 10,
    question: "–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ 2 —á–∞—Å–∞—Ö?",
    options: ["80 –º–∏–Ω—É—Ç", "100 –º–∏–Ω—É—Ç", "120 –º–∏–Ω—É—Ç", "140 –º–∏–Ω—É—Ç"],
    correct: 2,
    explanation: "–í 1 —á–∞—Å–µ 60 –º–∏–Ω—É—Ç, –∑–Ω–∞—á–∏—Ç –≤ 2 —á–∞—Å–∞—Ö: 2 √ó 60 = 120 –º–∏–Ω—É—Ç.",
    points: 2
  }
];

export default function Olympiad() {
  const { toast } = useToast();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<number[]>(new Array(mathQuestions.length).fill(-1));
  const [selectedAnswer, setSelectedAnswer] = useState(-1);
  const [isCompleted, setIsCompleted] = useState(false);
  const [result, setResult] = useState<OlympiadResult | null>(null);
  const [startTime] = useState(Date.now());
  const [showResults, setShowResults] = useState(false);
  const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    if (isCompleted) return;
    
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          handleComplete(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isCompleted]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleAnswerSelect = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
  };

  const handleNextQuestion = () => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = selectedAnswer;
    setAnswers(newAnswers);
    setSelectedAnswer(-1);

    if (currentQuestion < mathQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      handleComplete(newAnswers);
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setSelectedAnswer(answers[currentQuestion - 1]);
    }
  };

  const handleComplete = (finalAnswers = answers) => {
    if (isCompleted) return;
    
    const endTime = Date.now();
    const timeSpent = Math.floor((endTime - startTime) / 1000);
    const minutes = Math.floor(timeSpent / 60);
    const seconds = timeSpent % 60;
    const timeSpentStr = `${minutes}:${seconds.toString().padStart(2, '0')}`;

    let score = 0;
    const maxScore = mathQuestions.reduce((sum, q) => sum + q.points, 0);

    finalAnswers.forEach((answer, index) => {
      if (answer === mathQuestions[index].correct) {
        score += mathQuestions[index].points;
      }
    });

    const percentage = Math.round((score / maxScore) * 100);
    const certificateEligible = percentage >= 70;

    const olympiadResult: OlympiadResult = {
      score,
      maxScore,
      percentage,
      answers: finalAnswers,
      timeSpent: timeSpentStr,
      certificateEligible
    };

    setResult(olympiadResult);
    setIsCompleted(true);
    setShowResults(true);

    toast({
      title: "–û–ª–∏–º–ø–∏–∞–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
      description: `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}/${maxScore} –±–∞–ª–ª–æ–≤ (${percentage}%)`,
    });
  };

  const progress = ((currentQuestion + 1) / mathQuestions.length) * 100;
  const answeredCount = answers.filter(a => a !== -1).length;

  if (showResults && result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-peach via-white to-sunshine py-8 px-4">
        <div className="max-w-4xl mx-auto">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center bg-white/90 backdrop-blur-sm px-6 py-3 rounded-full border border-tangerine/30 mb-6">
              <Icon name="Trophy" className="h-5 w-5 text-tangerine mr-2" />
              <span className="text-darkBlue font-medium">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ª–∏–º–ø–∏–∞–¥—ã</span>
            </div>
            <h1 className="text-4xl font-bold text-darkBlue mb-4 font-heading">–û–ª–∏–º–ø–∏–∞–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h1>
            <p className="text-xl text-darkBlue/80">–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Ä¢ 3 –∫–ª–∞—Å—Å</p>
          </div>

          {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
          <Card className="bg-white/90 backdrop-blur-sm shadow-xl mb-8">
            <CardHeader className="text-center">
              <div className={`mx-auto mb-4 p-6 rounded-full w-fit ${
                result.percentage >= 90 ? "bg-green-500" : 
                result.percentage >= 80 ? "bg-blue-500" : 
                result.percentage >= 70 ? "bg-yellow-500" : "bg-red-500"
              }`}>
                <Icon name="Award" className="h-12 w-12 text-white" />
              </div>
              <CardTitle className="text-3xl font-heading">
                {result.score}/{result.maxScore} –±–∞–ª–ª–æ–≤
              </CardTitle>
              <CardDescription className="text-xl">
                {result.percentage}% ‚Ä¢ –í—Ä–µ–º—è: {result.timeSpent}
              </CardDescription>
              <Badge variant="outline" className={`mt-4 text-lg px-4 py-2 ${
                result.percentage >= 90 ? "border-green-500 text-green-700" : 
                result.percentage >= 80 ? "border-blue-500 text-blue-700" : 
                result.percentage >= 70 ? "border-yellow-500 text-yellow-700" : "border-red-500 text-red-700"
              }`}>
                {result.percentage >= 90 ? "–û—Ç–ª–∏—á–Ω–æ!" : 
                 result.percentage >= 80 ? "–•–æ—Ä–æ—à–æ!" : 
                 result.percentage >= 70 ? "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" : "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"}
              </Badge>
            </CardHeader>
            <CardContent>
              <div className="text-center space-y-4">
                <Progress value={result.percentage} className="h-4" />
                {result.certificateEligible && (
                  <div className="bg-gradient-to-r from-sunshine/20 to-tangerine/20 border border-tangerine/30 rounded-lg p-6">
                    <div className="flex items-center justify-center gap-3 mb-4">
                      <Icon name="Award" className="h-6 w-6 text-tangerine" />
                      <h3 className="text-xl font-semibold text-darkBlue font-heading">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
                    </div>
                    <p className="text-darkBlue/80 mb-4">
                      –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞!
                    </p>
                    <Button className="bg-gradient-to-r from-tangerine to-warmOrange hover:from-warmOrange hover:to-tangerine">
                      <Icon name="Download" className="mr-2 h-5 w-5" />
                      –°–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                    </Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          <Card className="bg-white/90 backdrop-blur-sm shadow-xl mb-8">
            <CardHeader>
              <CardTitle className="font-heading">–†–∞–∑–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤</CardTitle>
              <CardDescription>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {mathQuestions.map((question, index) => {
                  const userAnswer = result.answers[index];
                  const isCorrect = userAnswer === question.correct;
                  
                  return (
                    <div key={question.id} className={`p-4 rounded-lg border ${
                      isCorrect ? "border-green-200 bg-green-50" : "border-red-200 bg-red-50"
                    }`}>
                      <div className="flex items-start gap-3">
                        <div className={`p-2 rounded-full ${
                          isCorrect ? "bg-green-500" : "bg-red-500"
                        }`}>
                          <Icon 
                            name={isCorrect ? "Check" : "X"} 
                            className="h-4 w-4 text-white" 
                          />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-semibold text-darkBlue mb-2">
                            –í–æ–ø—Ä–æ—Å {index + 1}: {question.question}
                          </h4>
                          <div className="grid grid-cols-2 gap-2 mb-3">
                            {question.options.map((option, optionIndex) => (
                              <div
                                key={optionIndex}
                                className={`p-2 rounded border text-sm ${
                                  optionIndex === question.correct
                                    ? "border-green-500 bg-green-100 text-green-800"
                                    : optionIndex === userAnswer && !isCorrect
                                    ? "border-red-500 bg-red-100 text-red-800"
                                    : "border-gray-200 bg-gray-50"
                                }`}
                              >
                                {option}
                                {optionIndex === question.correct && (
                                  <Icon name="Check" className="inline ml-2 h-3 w-3" />
                                )}
                                {optionIndex === userAnswer && !isCorrect && (
                                  <Icon name="X" className="inline ml-2 h-3 w-3" />
                                )}
                              </div>
                            ))}
                          </div>
                          <div className="bg-blue-50 border border-blue-200 rounded p-3">
                            <p className="text-sm text-blue-800">
                              <Icon name="Info" className="inline mr-2 h-4 w-4" />
                              {question.explanation}
                            </p>
                          </div>
                          <div className="mt-2 text-right">
                            <Badge variant="outline">
                              {isCorrect ? `+${question.points}` : "0"} –∏–∑ {question.points} –±–∞–ª–ª–æ–≤
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="text-center space-y-4">
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button 
                size="lg"
                className="bg-gradient-to-r from-tangerine to-warmOrange hover:from-warmOrange hover:to-tangerine"
                onClick={() => window.location.href = '/dashboard'}
              >
                <Icon name="User" className="mr-2 h-5 w-5" />
                –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
              </Button>
              <Button 
                size="lg"
                variant="outline"
                className="border-tangerine text-tangerine hover:bg-tangerine hover:text-white"
                onClick={() => window.location.href = '/'}
              >
                <Icon name="Home" className="mr-2 h-5 w-5" />
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
            <p className="text-sm text-darkBlue/60">
              –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-peach via-white to-sunshine py-8 px-4">
      <div className="max-w-4xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center bg-white/90 backdrop-blur-sm px-6 py-3 rounded-full border border-tangerine/30 mb-6">
            <Icon name="Calculator" className="h-5 w-5 text-tangerine mr-2" />
            <span className="text-darkBlue font-medium">–û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ</span>
          </div>
          <h1 className="text-4xl font-bold text-darkBlue mb-4 font-heading">–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Ä¢ 3 –∫–ª–∞—Å—Å</h1>
          <div className="flex items-center justify-center gap-6 text-darkBlue/80">
            <span>–í–æ–ø—Ä–æ—Å–æ–≤: {mathQuestions.length}</span>
            <span>–í—Ä–µ–º—è: {formatTime(timeLeft)}</span>
            <span>–û—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ: {answeredCount}/{mathQuestions.length}</span>
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <Card className="bg-white/90 backdrop-blur-sm mb-8">
          <CardContent className="pt-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm text-darkBlue/60">–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ª–∏–º–ø–∏–∞–¥—ã</span>
              <span className="text-sm font-medium">
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {mathQuestions.length}
              </span>
            </div>
            <Progress value={progress} className="h-2" />
          </CardContent>
        </Card>

        {/* –í–æ–ø—Ä–æ—Å */}
        <Card className="bg-white/90 backdrop-blur-sm shadow-xl">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl font-heading">
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1}
              </CardTitle>
              <Badge variant="outline" className="bg-sunshine/20 text-darkBlue">
                {mathQuestions[currentQuestion].points} {mathQuestions[currentQuestion].points === 1 ? '–±–∞–ª–ª' : mathQuestions[currentQuestion].points < 5 ? '–±–∞–ª–ª–∞' : '–±–∞–ª–ª–æ–≤'}
              </Badge>
            </div>
            <CardDescription className="text-lg">
              {mathQuestions[currentQuestion].question}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <RadioGroup
              value={selectedAnswer.toString()}
              onValueChange={(value) => handleAnswerSelect(parseInt(value))}
              className="space-y-4"
            >
              {mathQuestions[currentQuestion].options.map((option, index) => (
                <div key={index} className="flex items-center space-x-3 p-4 rounded-lg border border-tangerine/20 hover:bg-sunshine/10 transition-colors">
                  <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                  <Label 
                    htmlFor={`option-${index}`} 
                    className="flex-1 text-lg cursor-pointer"
                  >
                    {option}
                  </Label>
                </div>
              ))}
            </RadioGroup>

            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            <div className="flex justify-between items-center mt-8">
              <Button
                variant="outline"
                onClick={handlePreviousQuestion}
                disabled={currentQuestion === 0}
                className="border-tangerine text-tangerine hover:bg-tangerine hover:text-white"
              >
                <Icon name="ChevronLeft" className="mr-2 h-4 w-4" />
                –ù–∞–∑–∞–¥
              </Button>

              <div className="flex gap-3">
                {currentQuestion === mathQuestions.length - 1 ? (
                  <Button
                    onClick={() => handleComplete()}
                    disabled={selectedAnswer === -1}
                    className="bg-gradient-to-r from-tangerine to-warmOrange hover:from-warmOrange hover:to-tangerine"
                    size="lg"
                  >
                    <Icon name="CheckCircle" className="mr-2 h-5 w-5" />
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É
                  </Button>
                ) : (
                  <Button
                    onClick={handleNextQuestion}
                    disabled={selectedAnswer === -1}
                    className="bg-gradient-to-r from-tangerine to-warmOrange hover:from-warmOrange hover:to-tangerine"
                  >
                    –î–∞–ª–µ–µ
                    <Icon name="ChevronRight" className="ml-2 h-4 w-4" />
                  </Button>
                )}
              </div>
            </div>

            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
            {selectedAnswer === -1 && (
              <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-center gap-2 text-blue-800">
                  <Icon name="Info" className="h-4 w-4" />
                  <span className="text-sm">–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* –ë–æ–∫–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º */}
        <Card className="bg-white/90 backdrop-blur-sm mt-6">
          <CardHeader>
            <CardTitle className="text-lg font-heading">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-5 sm:grid-cols-10 gap-2">
              {mathQuestions.map((_, index) => (
                <Button
                  key={index}
                  variant={currentQuestion === index ? "default" : "outline"}
                  size="sm"
                  className={`h-10 w-10 ${
                    currentQuestion === index
                      ? "bg-gradient-to-r from-tangerine to-warmOrange"
                      : answers[index] !== -1
                      ? "border-green-500 text-green-700 bg-green-50"
                      : "border-tangerine/30"
                  }`}
                  onClick={() => {
                    setCurrentQuestion(index);
                    setSelectedAnswer(answers[index]);
                  }}
                >
                  {index + 1}
                </Button>
              ))}
            </div>
            <div className="flex items-center gap-4 mt-4 text-sm text-darkBlue/60">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded border-2 border-tangerine/30"></div>
                <span>–ù–µ –æ—Ç–≤–µ—á–µ–Ω</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded bg-green-100 border-2 border-green-500"></div>
                <span>–û—Ç–≤–µ—á–µ–Ω</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded bg-gradient-to-r from-tangerine to-warmOrange"></div>
                <span>–¢–µ–∫—É—â–∏–π</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}